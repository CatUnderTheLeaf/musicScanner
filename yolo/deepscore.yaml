names:
  0: brace
  1: ledgerLine
  2: repeatDot
  3: segno
  4: coda
  5: clefG
  6: clefCAlto
  7: clefCTenor
  8: clefF
  9: clefUnpitchedPercussion
  10: clef8
  11: clef15
  12: timeSig0
  13: timeSig1
  14: timeSig2
  15: timeSig3
  16: timeSig4
  17: timeSig5
  18: timeSig6
  19: timeSig7
  20: timeSig8
  21: timeSig9
  22: timeSigCommon
  23: timeSigCutCommon
  24: noteheadBlackOnLine
  25: noteheadBlackOnLineSmall
  26: noteheadBlackInSpace
  27: noteheadBlackInSpaceSmall
  28: noteheadHalfOnLine
  29: noteheadHalfOnLineSmall
  30: noteheadHalfInSpace
  31: noteheadHalfInSpaceSmall
  32: noteheadWholeOnLine
  33: noteheadWholeOnLineSmall
  34: noteheadWholeInSpace
  35: noteheadWholeInSpaceSmall
  36: noteheadDoubleWholeOnLine
  37: noteheadDoubleWholeOnLineSmall
  38: noteheadDoubleWholeInSpace
  39: noteheadDoubleWholeInSpaceSmall
  40: augmentationDot
  41: stem
  42: tremolo1
  43: tremolo2
  44: tremolo3
  45: tremolo4
  46: tremolo5
  47: flag8thUp
  48: flag8thUpSmall
  49: flag16thUp
  50: flag32ndUp
  51: flag64thUp
  52: flag128thUp
  53: flag8thDown
  54: flag8thDownSmall
  55: flag16thDown
  56: flag32ndDown
  57: flag64thDown
  58: flag128thDown
  59: accidentalFlat
  60: accidentalFlatSmall
  61: accidentalNatural
  62: accidentalNaturalSmall
  63: accidentalSharp
  64: accidentalSharpSmall
  65: accidentalDoubleSharp
  66: accidentalDoubleFlat
  67: keyFlat
  68: keyNatural
  69: keySharp
  70: articAccentAbove
  71: articAccentBelow
  72: articStaccatoAbove
  73: articStaccatoBelow
  74: articTenutoAbove
  75: articTenutoBelow
  76: articStaccatissimoAbove
  77: articStaccatissimoBelow
  78: articMarcatoAbove
  79: articMarcatoBelow
  80: fermataAbove
  81: fermataBelow
  82: caesura
  83: restDoubleWhole
  84: restWhole
  85: restHalf
  86: restQuarter
  87: rest8th
  88: rest16th
  89: rest32nd
  90: rest64th
  91: rest128th
  92: restHNr
  93: dynamicP
  94: dynamicM
  95: dynamicF
  96: dynamicS
  97: dynamicZ
  98: dynamicR
  99: graceNoteAcciaccaturaStemUp
  100: graceNoteAppoggiaturaStemUp
  101: graceNoteAcciaccaturaStemDown
  102: graceNoteAppoggiaturaStemDown
  103: ornamentTrill
  104: ornamentTurn
  105: ornamentTurnInverted
  106: ornamentMordent
  107: stringsDownBow
  108: stringsUpBow
  109: arpeggiato
  110: keyboardPedalPed
  111: keyboardPedalUp
  112: tuplet3
  113: tuplet6
  114: fingering0
  115: fingering1
  116: fingering2
  117: fingering3
  118: fingering4
  119: fingering5
  120: slur
  121: beam
  122: tie
  123: restHBar
  124: dynamicCrescendoHairpin
  125: dynamicDiminuendoHairpin
  126: tuplet1
  127: tuplet2
  128: tuplet4
  129: tuplet5
  130: tuplet7
  131: tuplet8
  132: tuplet9
  133: tupletBracket
  134: staff
  135: ottavaBracket
path: /home/cat/projects/musicScanner/dataset/deepscore
test: deepscores_test.txt
train: deepscores_train.txt
val: deepscores_val.txt

download: |
  import shutil
  import os
  from pathlib import Path
  from obb_anns import OBBAnns
  import numpy as np
  
  from ultralytics.utils.downloads import download
  from ultralytics.utils.ops import xyxy2xywh
  
  # Download
  dir = Path(yaml['path'])  # dataset root dir
  if not dir.exists():
      parent = Path(dir.parent)  # download dir
      urls = ['https://zenodo.org/records/4012193/files/ds2_dense.tar.gz?download=1']
      download(urls, dir=parent)
      # Rename directories
      if dir.exists():
          shutil.rmtree(dir)
      (parent / 'ds2_dense').rename(dir)  # rename dir
      os.remove(parent / 'ds2_dense.tar.gz')

  (dir / 'labels').mkdir(parents=True, exist_ok=True)  # create labels dir

  # Convert
  def convert_labels(json_file_name, split=False):
      o = OBBAnns(os.path.join(dir, json_file_name))
      o.load_annotations()
      o.set_annotation_set_filter(['deepscores'])

      img_idxs = [i for i in range(len(o.img_info))]
      imgs, anns = o.get_img_ann_pair(idxs=img_idxs)

      def convert_boxes(box, w, h):
          xywh = xyxy2xywh(np.array([[box[0] / w, box[1] / h, box[2] / w, box[3] / h]]))[0]
          return f"{xywh[0]:.5f} {xywh[1]:.5f} {xywh[2]:.5f} {xywh[3]:.5f}"

      for img, ann in zip(imgs, anns):

          label_name = os.path.join(dir, 'labels', Path(img['filename']).stem + ".txt")

          w = img['width']
          h = img['height']
          # DO NOT FORGET to make -1 on cat_id
          # - The bounding boxes are given as absolute values.
          # - `a_bbox` contains the coordinates of the top left and bottom right corners.
          # - `cat_id` is stringified ints and starts at 1.
          result = [f"{cat[0]-1} {convert_boxes(box, w, h)}\n" for cat, box in zip(ann['cat_id'], ann['a_bbox'])]

          with open(label_name, 'w') as f:
              f.writelines(result)
      if split:
          with open(os.path.join(dir, Path(json_file_name).stem + ".txt"), 'w') as f:
              for x in imgs[:int(len(o.img_info)*0.8)]:
                  f.write('./images/'+x['filename']+'\n')
          with open(os.path.join(dir, "deepscores_val.txt"), 'w') as f:
              for x in imgs[int(len(o.img_info)*0.8):]:
                  f.write('./images/'+x['filename']+'\n')
      else:
          with open(os.path.join(dir, Path(json_file_name).stem + ".txt"), 'w') as f:
              for x in imgs:
                  f.write('./images/'+x['filename']+'\n')

  convert_labels('deepscores_test.json')
  convert_labels('deepscores_train.json', split=True)